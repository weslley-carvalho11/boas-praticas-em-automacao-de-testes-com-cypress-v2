--------------------------------------------------------------------------------------------------
Arquivos
--------------------------------------------------------------------------------------------------
package.json
-> Na sua estrutura ele contém o "devDependencies" no qual possui o cypress (framework) e faker.js (biblioteca), 
ao entrar na pasta do projeto no cmd e executar o comando npm i ele instala todo o que está em "devDependencies". 

--------------------------------------------------------------------------------------------------
Anotação
--------------------------------------------------------------------------------------------------
Multiplos navegadores
-> https://docs.cypress.io/app/references/trade-offs#Multiple-tabs
-> resumo: 
    -> O Cypress é executado dentro do navegador.
    -> O Cypress não suporta testes em vários navegadores ao mesmo tempo mas tem plugin chamado de 
    "@cypress/puppeteer" para usar várias abas. 


O que fazer antes de refatorar o código?
-> É importante é rodar os testes antes de iniciar a refatoração de código, pois saberemos o que está ou não  
funcioando.
-> Verificar quais os testes fazem sentido remover ou manter. 

O que significa o termo "Não Determinístico"? 
-> Na ciência da computação, refere-se a algo que pode se comportar de forma diferentes em diferente execuções, 
mesmo com a(s) mesma(s) entrada(s). 

O que significa o termo "Determinístico"? 
-> Refere-se a algo que possui o mesmo comportamento em diferentes execuções com as mesma(s) entrada(s).

Quais os motivos podem gerar um "flaky test"?
-> Depender de comportamentos não determinístico ou não definidos;
-> Código frágil próprio ou de terceiros; 
-> Problemas de infraestrutura; 

O que é "Dry" (Don't repeat yourself)?
-> É um pricípio de desenvolvimento de software que visa reduzir a repetição de informações que mudarão. 
-> Criado por Andy Hunt

O que encapsulamento? 
É um conceito na programação orientada a objetos no qual agrupa dados e métodos em uma unidade, por exemplo 
uma classe;

-> Qual a diferença entre argumento e parâmetro?
--------------------------------------------------------------------------------------------------
Comandos CMD
--------------------------------------------------------------------------------------------------
npm i cypress@latest -D 
-> Instala a última versão do cypress;

--------------------------------------------------------------------------------------------------
Comandos Cypress
--------------------------------------------------------------------------------------------------
cy.context('Cenários separados por contexto', () => {
    it('teste', () => {

    })
})
-> É básicamente um comando que exibe "sub-título", podemos separar os testes que são feitos para 
exibir erros por exemplo. 

--------------------------------------------------------------------------------------------------
Detalhamento
--------------------------------------------------------------------------------------------------
Cypress.Commands.add('nomeDoComandoCustomizado', function(fieldsVals = {}) {
    //Comando customizado
})
-> O Comando customizado recebe um objeto como parâmentro vazio por isso foi adicionado "= {}" depois 
do objeto "fieldsVals". 


Cypress.Commands.add('nomeDoComandoCustomizado', function(fieldsVals = {}) {
    const {
        firstname: 'João',
        lastname: 'Souza',
        email: 'jsouza@email.com',
        opentext: '',
    } = fieldsVals

    cy,get('#firstname').type('firstname')
})
-> Ao desestruturar o objeto não precisamos repetir o nome do objeto
-> No arquivo SPEC podemos passar todos os valores do objeto, ou apenas um deles, por exemplo ao usar 
o comando customizado no arquivo SPEC posso criar um objeto que possui o valor email. Exemplo abaixo:

it ('teste de exemplo', () => {
    const invalidEmailFormat = {
        email: jsouza#email.com
    }

    cy.nomeDoComandoCustomizado('invalidEmailFormat')
})



const videos = [
    {
        title: "Título do vídeo",
        description: "Descrição do vídeo",
        url: "https://google.com/video"
    },
    {
        title: "Título do vídeo 2",
        description: "Descrição do vídeo 2",
        url: "https://google.com/video2"
    }
];

it('Criar vídeos', => () {
    videos.forEach(video => {
        createVideo(video);
    });
})

funtion createVideo (video) {
    //criacão de vídeo
}

-> Primeiro criamos um array de objetos, que permitirá usar vários valores. Podemos criar uma constante 
ou centralizar isso em um arquivo. 
-> No teste criar um "forEach" que irá passar por todos os objetos do array chamada de "video" criada mais 
a cima. 
-> Podemos criar um função dentro do proprio arquivo spec antes de passar ele para o comando customizado. 

context('contexto', () => {
    beforeEach(() => cy.visit('https://google.com'))

    it('teste', => {
        //teste
    })
})
-> Podemos adicionar um "beforeEach" que só é executado dentro de um contexto de teste.
-> A vantagem é que se houve outros testes dentro desse contexto todos ele irão execultar o beforeEach.


const data = require('.../fixtures/data.json') //Pega o array de objetos json 

data.forEach((item, index) => {
    it(`${index + 1}`, () => {
        cy.get('#name').type('item.first')
        cy.get('#last-name').type('item.lastName')
    })
})
-> É criado uma constante na qual recebe um arry de objetos de arquivo ".json" dentro de "fixtures".
-> Criamos uma iteração com o ".forEach".
-> Podemos usar o template literals no título do teste.
-> O que "Template Literals"? Através do "${}" conseguimos fazer interpolação de strings, ou seja, usar 
variáveis e expressões. 


Cypress._.times(5, () => {
  it.only("submete o formulário com sucesso", () => {
    const customer = {
      firstName: "João",
      lastName: "Silva",
      email: "joaosilva@example.com"
    };

    cy.fillMandatoryFields(customer);
    cy.contains("Enviar").click();

    cy.get(".success p").should("contain", "Formulário submetido com sucesso.");
  });
});

-> Ao baixar o Cypress ele empacota uma biblioteca chamada de lodash.
-> No qual recebe como parâmetro uma função a quantidade de vezes que ele será executado e uma função de 
callback que dentro dela será inserido o teste.

simple2.cy.js v2 
describe('Code duplication bad practice - repetitive tests', () => {
  beforeEach(() => {
    cy.intercept(
      'GET',
      '**/search**'
    ).as('getStories')

    cy.visit('https://hackernews-seven.vercel.app')
    cy.wait('@getStories')
  })

  const terms = ['reactjs', 'vuejs', 'angularjs'] 
  -> Como a pesquisa vai ser apenas de texto, criamos um array com strings.

  terms.forEach(terms => {
    it(`searches for "${terms}"`, () => {
      cy.search(terms)
      cy.wait('@getStories')

      cy.get('.table-row')
        .should('have.length', 100)
    })
  })
  -> Criando uma iteração com "forEach" no qual ele irá percorrer o array chamado de "terms";
  -> Dentro da iteração coloquei o teste, para que a cada iteração ele faça o teste com valor diferente.


Sample3.cy.js
describe('Code duplication bad practice - repetitive actions and assertions', () => {
  beforeEach(() => {
    cy.intercept(
      'GET',
      '**/search**'
    ).as('getStories')

    cy.visit('https://hackernews-seven.vercel.app')
    cy.wait('@getStories')
  })

  it('searches for the same term 3 times', () => {
    Cypress._.times(3, () => {
      cy.search('cypress.io')

      cy.get('.table-row')
        .its('length')
        .should('be.at.least', 1)
    })
  })

})
-> _times() é de uma biblioteca chamada de lowdash;
-> Essa biblioteca vem enpacota com o cypress; 
-> "._.times()" recebe dois parâmetros, a quantidade de vezes que você quer repetir o código que está dentro 
dele e uma função de callback; 


})


cy.intercept('GET', '**/notes')
cy.intercept('GET', "**/search**", { fixture: 'stories.json'}).as('getResponse')
-> Podemos usar um arquivo ".json" na pasta de fixtures ;
-> Quando ele fazer a busca ele irá exibir as informações do arquivo ".json";
-> Você consegue desaclopar a front da API;
-> Estamos mockando a resposta; 

hardcoded-assertions/sample.cy.js
 it('searches', () => {
    cy.fixture('stories.json')
      .then(({ hits }) => {
        cy.search('cypress.io')
        cy.wait('@getStories')

        cy.get('.table-row')
          .as('tableRows')
          .should('have.length', hits.length)

        hits.forEach((hit, index) => {
          cy.get('@tableRows')
            .eq(index)
            .should('contain', hit.title)
        })
      })
  })
  -> cy.fixture() com esse comando conseguimos usar dados localizados em arquivo. 
  -> .then() recebeu uma função de callback, e hits para ser desestruturado;
  -> cy.search() é o comando customizado no qual faz todos os comandos para realizar uma busca;
  -> Já que "hits" é uma lista, podemos usar o .lenght para conseguir o tamanho da lista, assim conseguimos pegar o tamanho dos valores dinamicamente; 
  -> hits.forEach(hit, index) => {.
          cy.get('@tableRows') -> Pega o alias definido 
            .eq(index) -> usa o index percorrido
            .should('contain', hit.title) -> Pega a informação de títulos de todos os objetos na lista de hits; 
  }
  -> Podemos fazer essa desetruturação logo no início do arquivo com o seguinte comando:
  -> const {hits} = require('../../caminhoDaPasta/arquivo')
--------------------------------------------------------------------------------------------------
Boas Práticas
--------------------------------------------------------------------------------------------------
-> Fazer refatoração em "baby step", ou seja, mudar uma coisa por vez.
-> Identificar a dublicação de código e centralizar ele em uma unica função. 
-> Ir direto na página onde ele deve executar a tarefa ao invés de clicar em botões para navegar na 
aplicação.
-> Centralizar os valores em array de objetos dentro do arquivo spec, mas a melhor prática é criar um 
arquivo ".json" ou ".js" dentro da pasta "fixtures". 
-> Quando houver vários valores podemos adicionalos a um array e usar do forEach para não ter 
que repetir o código;
-> Usar da Biblioteca de Lowdash e usar o comando de ".time()" para repetir o código.
-> Ao encontrar testes flaky, devemos colocá-los em quarentena para investigarmos e deixarmos os testes
mais robustos. 
-> Ao deixar o teste em quarentena evitamos falsos negativos nos testes; 
-> Uma forma de identificar se um teste é flaky é executando o teste várias vezes;
-> Criar testes o mais independetes do outro. 
-> Fazer Smoke Test antes de iniciar os testes, afim de garatir que tudo está funcionado da forma correta;
-> É uma melhor opção investir em teste de unidade e integração do em testes e2e, por serem mais rápidos e2e
e por testarem um escopo menor de código; 
-> Podemos criar testes e2e mais robustos executando testes em paralelo e implementando boas práticas de 
desenvolvimento de teste; 
-> Uma forma de evitar testes determinísticos é garantindo que massa de dados seja inserida antes dos testes,
por exemplo executando scripts de banco de dados; 
-> Utilizar waits para garantir que elemento está disponível antes de continuar os testes; 
-> Usar identificadores únicos para garantir que o teste irá interagir com o elemento correto;
-> Usar Page Objects para tornar os testes independetes, sem redudância de código, além de facilitar 
a manutenção do código. 
-> Não teste tudo atráves da GUI, dependo do teste é melhor fazer isso na forma de teste unitário ou 
regressão; 
-> Os testes devem conseguir rodar os testes em qualquer ambiente, seja o ambiente de teste, homologação 
ou produção; 
-> Evitar que as verificações sejam hardcoded, pois isso pode gerar erros na verificações;
-> fazer o código mais simples possível; 
-> Para dados sensíveis como e-mail e senha colocamos eles no arquivo chamado de cypress.env.json na raiz do projeto. 
-> Centralizamos a senha no arquivo e adicionamos ele no arquivo de .gitignore para que arquivo não vá para o repositório 
-> Adicionamos também ao comando que escreve a senha {log: false} assim no momento de execução a senha digitada fica oculta 


--------------------------------------------------------------------------------------------------
Más Práticas
--------------------------------------------------------------------------------------------------
Browser Testing
-> Ao invés de testar a aplicação acabamos testando o Browser e seu comportamento, como há um padrão 
no desenvolvimento de apliicações e funcionamento dos navegadores, não há o que se preocupar com isso.
Existe um geito mais inteligênte de testar isso como conferir o direcionamento do "href", e conferir se 
o atributo "target" possui o valor "_blank". 

Duplicação de código
-> Quando o código está duplicado e precisamos por algum motivo modificá-lo, temos que fazer isso em 
vários lugares diferentes, se centralizarmos tudo em único lugar preciaremos editar apenas um lugar.
-> Complexidade desnecessária 
